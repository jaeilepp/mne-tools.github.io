

.. _sphx_glr_auto_tutorials_plot_visualize_epochs.py:


.. _tut_viz_epochs:

Visualize Epochs data
=====================



.. code-block:: python

    import os.path as op

    import mne

    data_path = op.join(mne.datasets.sample.data_path(), 'MEG', 'sample')
    raw = mne.io.read_raw_fif(op.join(data_path, 'sample_audvis_raw.fif'))
    events = mne.read_events(op.join(data_path, 'sample_audvis_raw-eve.fif'))
    picks = mne.pick_types(raw.info, meg='grad')
    epochs = mne.Epochs(raw, events, [1, 2], picks=picks)





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/jaakko/mne-testing-data/MNE-sample-data/MEG/sample/sample_audvis_raw.fif...
        Read a total of 3 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
    Current compensation grade : 0
        Range : 25800 ... 192599 =     42.956 ...   320.670 secs
    Ready.
    Adding average EEG reference projection.
    1 projection items deactivated
    145 matching events found
    Applying baseline correction (mode: mean)
    4 projection items activated


This tutorial focuses on visualization of epoched data. All of the functions
introduced here are basically high level matplotlib functions with built in
intelligence to work with epoched data. All the methods return a handle to
matplotlib figure instance.

All plotting functions start with ``plot``. Let's start with the most
obvious. :func:`mne.Epochs.plot` offers an interactive browser that allows
rejection by hand when called in combination with a keyword ``block=True``.
This blocks the execution of the script until the browser window is closed.


.. code-block:: python

    epochs.plot(block=True)




.. image:: /auto_tutorials/images/sphx_glr_plot_visualize_epochs_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Loading data for 145 events and 421 original time points ...
    0 bad epochs dropped
    Loading data for 20 events and 421 original time points ...


The numbers at the top refer to the event id of the epoch. We only have
events with id numbers of 1 and 2 since we included only those when
constructing the epochs.

Since we did no artifact correction or rejection, there are epochs
contaminated with blinks and saccades. For instance, epoch number 9 (see
numbering at the bottom) seems to be contaminated by a blink (scroll to the
bottom to view the EOG channel). This epoch can be marked for rejection by
clicking on top of the browser window. The epoch should turn red when you
click it. This means that it will be dropped as the browser window is closed.
You should check out `help` at the lower left corner of the window for more
information about the interactive features.

To plot individual channels as an image, where you see all the epochs at one
glance, you can use function :func:`mne.Epochs.plot_image`. It shows the
amplitude of the signal over all the epochs plus an average of the
activation.


.. code-block:: python

    epochs.plot_image(97)

    # You also have functions for plotting channelwise information arranged into a
    # shape of the channel array. The image plotting uses automatic scaling by
    # default, but noisy channels and different channel types can cause the scaling
    # to be a bit off. Here we define the limits by hand.
    epochs.plot_topo_image(vmin=-200, vmax=200, title='ERF images')



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_visualize_epochs_002.png
            :scale: 47

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_visualize_epochs_003.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    Loading data for 145 events and 421 original time points ...
    Loading data for 145 events and 421 original time points ...


**Total running time of the script:**
(0 minutes 4.719 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_visualize_epochs.py <plot_visualize_epochs.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_visualize_epochs.ipynb <plot_visualize_epochs.ipynb>`
