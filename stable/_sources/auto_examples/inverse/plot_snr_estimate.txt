

.. _sphx_glr_auto_examples_inverse_plot_snr_estimate.py:


============================
Plot an estimate of data SNR
============================

This estimates the SNR as a function of time for a set of data.



.. image:: /auto_examples/inverse/images/sphx_glr_plot_snr_estimate_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a full noise covariance matrix (3 small eigenvalues omitted)
    Picked 305 channels from the data
    Effective nchan = 305 - 3 = 302




|


.. code-block:: python

    # Author: Eric Larson <larson.eric.d@gmail.com>
    #
    # License: BSD (3-clause)

    from os import path as op

    from mne.datasets.sample import data_path
    from mne.minimum_norm import read_inverse_operator
    from mne import read_evokeds
    from mne.viz import plot_snr_estimate

    print(__doc__)

    data_dir = op.join(data_path(), 'MEG', 'sample')
    fname_inv = op.join(data_dir, 'sample_audvis-meg-oct-6-meg-inv.fif')
    fname_evoked = op.join(data_dir, 'sample_audvis-ave.fif')

    inv = read_inverse_operator(fname_inv)
    evoked = read_evokeds(fname_evoked, baseline=(None, 0))[0]

    plot_snr_estimate(evoked, inv)

**Total running time of the script:**
(0 minutes 0.533 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_snr_estimate.py <plot_snr_estimate.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_snr_estimate.ipynb <plot_snr_estimate.ipynb>`
