

.. _sphx_glr_auto_examples_stats_plot_sensor_permutation_test.py:


=================================
Permutation T-test on sensor data
=================================

One tests if the signal significantly deviates from 0
during a fixed time window of interest. Here computation
is performed on MNE sample dataset between 40 and 60 ms.



.. code-block:: python

    # Authors: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)

    import numpy as np

    import mne
    from mne import io
    from mne.stats import permutation_t_test
    from mne.datasets import sample

    print(__doc__)







Set parameters


.. code-block:: python

    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    event_id = 1
    tmin = -0.2
    tmax = 0.5

    #   Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname)
    events = mne.read_events(event_fname)

    #   Set up pick list: MEG + STI 014 - bad channels (modify to your needs)
    include = []  # or stim channel ['STI 014']
    raw.info['bads'] += ['MEG 2443', 'EEG 053']  # bads + 2 more

    # pick MEG Gradiometers
    picks = mne.pick_types(raw.info, meg='grad', eeg=False, stim=False, eog=True,
                           include=include, exclude='bads')
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                        baseline=(None, 0), reject=dict(grad=4000e-13, eog=150e-6))
    data = epochs.get_data()
    times = epochs.times

    temporal_mask = np.logical_and(0.04 <= times, times <= 0.06)
    data = np.mean(data[:, :, temporal_mask], axis=2)

    n_permutations = 50000
    T0, p_values, H0 = permutation_t_test(data, n_permutations, n_jobs=1)

    significant_sensors = picks[p_values <= 0.05]
    significant_sensors_names = [raw.ch_names[k] for k in significant_sensors]

    print("Number of significant sensors : %d" % len(significant_sensors))
    print("Sensors names : %s" % significant_sensors_names)





.. rst-class:: sphx-glr-script-out

 Out::

    Number of significant sensors : 11
    Sensors names : [u'MEG 0243', u'MEG 1323', u'MEG 1333', u'MEG 1613', u'MEG 1643', u'MEG 2423', u'MEG 2522', u'MEG 2622', u'MEG 2632', u'MEG 2642', u'MEG 2643']


View location of significantly active sensors


.. code-block:: python


    evoked = mne.EvokedArray(-np.log10(p_values)[:, np.newaxis],
                             epochs.info, tmin=0.)

    # Extract mask and indices of active sensors in layout
    stats_picks = mne.pick_channels(evoked.ch_names, significant_sensors_names)
    mask = p_values[:, np.newaxis] <= 0.05

    evoked.plot_topomap(ch_type='grad', times=[0], scale=1,
                        time_format=None, cmap='Reds', vmin=0., vmax=np.max,
                        unit='-log10(p)', cbar_fmt='-%0.1f', mask=mask,
                        size=3, show_names=lambda x: x[4:] + ' ' * 20)



.. image:: /auto_examples/stats/images/sphx_glr_plot_sensor_permutation_test_001.png
    :align: center




**Total running time of the script:**
(0 minutes 1.167 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_sensor_permutation_test.py <plot_sensor_permutation_test.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_sensor_permutation_test.ipynb <plot_sensor_permutation_test.ipynb>`
